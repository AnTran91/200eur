<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Table(name="emmo_transaction")
 * @ORM\Entity(repositoryClass="App\Repository\TransactionRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Transaction implements \Serializable
{
    /**
     * CLASS CONSTANT
     */
    public const AUTHORISED = 'AUTHORISED';
    public const PENDING = 'PENDING';
    public const ABANDONED = 'ABANDONED';

    /**
     * CLASS ATTRIBUTS TO BE PERSISTED
     */

    /**
     * @var int
     *
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * Amount to be paid
     *
     * @ORM\Column(type="decimal", precision=10, scale=2)
     *
     * @Assert\NotBlank()
     * @Assert\Regex(pattern="/\d/")
     *
     * @var string
     */
    private $amount;

     /**
      * Transaction Identifier.
      * - unique on the day.
      * - its length must be 6 characters.
      * - its value must be between 000000 and 899999.
      *
      * @ORM\Column(type="integer", nullable=true)
      *
      * @var int
      */
    private $transactionNumber;

    /**
     * Unique transaction reference generated by the payment gateway
     * when creating a payment transaction.
     * Guarantees that each transaction is unique.
     *
     * @ORM\Column(type="text", nullable=true)
     *
     * @var string
     */
   private $transactionExtNumber;

    /**
     * Status of the Transaction
     *
     * @ORM\Column(name="status_code", type="string", length=255, nullable=true)
     *
     * @var string
     */
    private $status;

    /**
     * OrderCreation reference on the merchant side (ex: order_id)
     *
     * @ORM\Column(type="string", length=255, nullable=true)
     *
     * @Assert\NotBlank()
     * @Assert\Length(max = 255)
     *
     * @var string
     */
    private $reference;

    /**
     * This field is compulsory,
     * it matches the transaction date with the following pattern YYYYMMDDHHMMSS on the UTC=0 time zone.
     *
     * @ORM\Column(type="datetime")
     *
     * @var \DateTimeInterface
     */
    private $date;

    /**
     * Log Systempay response.
     *
     * @ORM\Column(name="log_response", type="array", nullable=true)
     *
     * @var array
     */
    private $logResponse;

    /**
     * Last transaction update.
     *
     * @ORM\Column(name="updated_at", type="datetime", nullable=true)
     *
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * Transaction paid status.
     *
     * @ORM\Column(name="paid", type="boolean", nullable=true)
     *
     * @var bool
     */
    private $paid;

    /**
     * Credit Card number of the customer without space.
     *
     * @ORM\Column(type="string", length=50, nullable=true)
     *
     * @var string
     */
    private $cardNumber;

    /**
     * Credit Card brand of the customer
     *
     * @ORM\Column(type="string", length=50, nullable=true)
     *
     * @var string
     */
    private $cardBrand;

    /**
     * MAPPED ATTRIBUTS
     */

    /**
     * @var User Customer number. Length of field: 32 characters max - Alphanumeric Type.
     *
     * Many Transaction relates to one User.
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\User", inversedBy="transactions")
     */
    private $client;

    /**
     * Many Transaction relates to one Wallet.
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\Wallet", inversedBy="transactions", cascade={"persist"})
     */
    private $wallet;

    /**
     * One Transaction relates to one OrderCreation.
     *
     * @ORM\OneToOne(targetEntity="App\Entity\Order", inversedBy="transaction", cascade={"persist"})
     * @ORM\JoinColumn(name="order_id", referencedColumnName="id")
     */
    private $orderTransaction;

    /**
     * Lifecycle Callbacks
     */

    /**
     * @ORM\PrePersist
     */
    public function createdAt(): void
    {
        $this->date = new \DateTime('now', new \DateTimeZone("UTC"));
        $this->updatedAt = new \DateTime('now');

        $this->status = self::PENDING;

        $this->paid = false;
    }

    /**
     * @ORM\PreUpdate
     * @ORM\PrePersist
     */
    public function updatedAt(): void
    {
        $this->updatedAt = new \DateTime('now');
    }

    /**
     * GETTERS & SETTERS
     */

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getAmount()
    {
        return $this->amount;
    }

    public function setAmount($amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): self
    {
        $this->date = $date;

        return $this;
    }

    public function getTransactionNumber(): ?string
    {
        return $this->transactionNumber;
    }

    public function setTransactionNumber(string $transactionNumber): self
    {
        $this->transactionNumber = $transactionNumber;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    public function getCardNumber(): ?string
    {
        return $this->cardNumber;
    }

    public function setCardNumber(string $cardNumber): self
    {
        $this->cardNumber = $cardNumber;

        return $this;
    }

    public function getCardBrand(): ?string
    {
        return $this->cardBrand;
    }

    public function setCardBrand(string $cardBrand): self
    {
        $this->cardBrand = $cardBrand;

        return $this;
    }

    public function getClient(): ?User
    {
        return $this->client;
    }

    public function setClient(?User $client): self
    {
        $this->client = $client;

        return $this;
    }

    public function getWallet(): ?Wallet
    {
        return $this->wallet;
    }

    public function setWallet(?Wallet $wallet): self
    {
        $this->wallet = $wallet;

        return $this;
    }

    public function getOrderTransaction(): ?Order
    {
        return $this->orderTransaction;
    }

    public function setOrderTransaction(?Order $orderTransaction): self
    {
        $this->orderTransaction = $orderTransaction;

        return $this;
    }

    public function getReference(): ?string
    {
        return $this->reference;
    }

    public function setReference(string $reference): self
    {
        $this->reference = $reference;

        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getPaid(): ?bool
    {
        return $this->paid;
    }

    public function setPaid(bool $paid): self
    {
        $this->paid = $paid;

        return $this;
    }

    public function getLogResponse(): ?array
    {
        return $this->logResponse;
    }

    public function setLogResponse(?array $logResponse): self
    {
        $this->logResponse = $logResponse;

        return $this;
    }

    public function getTransactionExtNumber(): ?string
    {
        return $this->transactionExtNumber;
    }

    public function setTransactionExtNumber(?string $transactionExtNumber): self
    {
        $this->transactionExtNumber = $transactionExtNumber;

        return $this;
    }

    public function isPaid(): bool
    {
        return $this->paid;
    }

    /**
     * OVERRIDING
     */

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {
        return (string)$this->transactionNumber;
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {
        return serialize([
          $this->id,
          $this->amount,
          $this->date,
          $this->transactionNumber,
          $this->status,
          $this->cardNumber,
          $this->cardBrand
        ]);
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($data)
    {
        list(
          $this->id,
          $this->amount,
          $this->date,
          $this->transactionNumber,
          $this->status,
          $this->cardNumber,
          $this->cardBrand
        ) = unserialize($data);
    }
}
