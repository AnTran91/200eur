(function(window, jQuery) {
  window.ParamHandler = function(options) {

    this.settings = $.extend({
      $wrapper: $('.js-page-section'),
      // These are the defaults.
      choiceType: ['choice', 'radio', 'checkbox'],
      imageRenovationType: ['image_renovation']
    }, options);

    this.settings.$wrapper.on(
      'change',
      '.js-field-type',
      this.onChangeFieldType.bind(this)
    );

    // init
    this.settings.$wrapper.find('.js-multi-select-selector').multiSelect();
    this.settings.$wrapper.find('.js-field-type').each(this.initFields);
    //this.settings.$wrapper.find('.js-file-upload').each(this.initKendoUpload.bind(this));

    this.settings.$wrapper.find('.js-fields-collection').collection({
      prefix: 'fields-collection',
      allow_up: false,
      allow_down: false,
      min: 1,
      after_add: this.afterAddFieldSection.bind(this),
      children: [{
        selector: '.js-choices-collection',
        prefix: 'choices-collection',
        allow_up: false,
        allow_down: false,
        add_at_the_end: true
      }, {
        selector: '.js-renovations-collection',
        prefix: 'renovations-collection',
        allow_up: false,
        allow_down: false,
        add_at_the_end: true,
        children: [{
          selector: '.js-renovations-child-collection',
          prefix: 'renovations-child-collection',
          allow_up: false,
          allow_down: false,
          add_at_the_end: true,
          min: 1,
          after_init: this.initKendoUpload.bind(this),
          after_add: this.afterAddRenovationSection.bind(this),
          after_remove: this.afterRemoveRenovationSection.bind(this)
        }]
      }]
    });
  };

  $.extend(window.ParamHandler.prototype, {
    initFields: function() {
      $(this).trigger('change');
    },
    afterRemoveRenovationSection: function(collection, element) {
      var $uploadElem = $(element).find('.js-file-upload');
      var upload = $uploadElem.data("kendoUpload");
      console.log(upload);
      upload.clearAllFiles();
      console.log($uploadElem.find('.k-upload-action'));
      $uploadElem.find('.k-upload-action').trigger('click');
    },
    afterAddRenovationSection: function(collection, element) {
      var $uploadElem = $(element).find('.js-file-upload');
      $uploadElem.kendoUpload({
        multiple: false,
        async: {
          chunkSize: $uploadElem.data('chunk-size'),
          saveUrl: $uploadElem.data('upload-url'),
          removeUrl: $uploadElem.data('delete-url'),
          autoUpload: true
        },
        validation: {
          allowedExtensions: $uploadElem.data('allowed-extensions'),
          maxFileSize: $uploadElem.data('size-limit')
        },
        files: $uploadElem.data('init-files'),
        localization: {
          select: $uploadElem.data('label')
        },
        remove: this.onRemove,
        success: this.onSuccess,
        error: this.onError
      });
    },
    afterAddFieldSection: function(collection, element) {
      $(element).find('.js-multi-select-selector').multiSelect();
      console.log($(element).find('.js-field-type').val());
      if ($.inArray($(element).find('.js-field-type').val(), this.settings.choiceType) == -1) {
        $(element).find('.js-choices-section').hide();
      } else {
        $(element).find('.js-choices-section').show();
      }

      if ($.inArray($(element).find('.js-field-type').val(), this.settings.imageRenovationType) == -1) {
        $(element).find('.js-renovation-choices-section').hide();
      } else {
        $(element).find('.js-renovation-choices-section').show();
      }
    },
    onChangeFieldType: function(e) {
      var $elem = $(e.currentTarget).parents('.js-field-section');
      if ($.inArray($(e.currentTarget).val(), this.settings.choiceType) == -1) {
        $elem.find('.js-choice-section').remove();
        $elem.find('.js-choices-section').hide();
      } else {
        $elem.find('.js-choices-section').show();
      }

      if ($.inArray($(e.currentTarget).val(), this.settings.imageRenovationType) == -1) {
        $elem.find('.js-renovation-choice-section').remove();
        $elem.find('.js-renovation-choices-section').hide();
      } else {
        $elem.find('.js-renovation-choices-section').show();
      }
    },
    onRemove: function(e) {
      e.data = {
        uuid: e.files[0].uid,
        file_name: e.files[0].name
      };
    },
    onError: function(e) {
      alertify.error(e.response.error, 5);
    },
    onSuccess: function(e) {
      if (e.operation == "upload") {
        e.files[0].uid = e.response.fileUid;
        $(this.element).closest('.js-upload-section').find('.js-picture-path-field').val(e.response.filePath);
        $(this.element).closest('.js-upload-section').find('.js-picture-uuid').val(e.response.fileUid);
        $(this.element).closest('.js-upload-section').find('.js-file-display').attr('src', e.response.filePath);
      }

      if (e.operation == "remove") {
        $(this.element).closest('.js-upload-section').find('.js-picture-path-field').val("");
        $(this.element).closest('.js-upload-section').find('.js-picture-uuid').val("");
        $(this.element).closest('.js-upload-section').find('.js-file-display').attr('src', "{{ asset('no-img.png', 'admin_images') }}");
      }
      alertify.success(e.response.msg, 5);
    },
    initKendoUpload: function(collection, element) {
      var $uploadElem = $(collection).find('.js-file-upload');
      $uploadElem.kendoUpload({
        multiple: false,
        async: {
          chunkSize: $uploadElem.data('chunk-size'),
          saveUrl: $uploadElem.data('upload-url'),
          removeUrl: $uploadElem.data('delete-url'),
          autoUpload: true
        },
        validation: {
          allowedExtensions: $uploadElem.data('allowed-extensions'),
          maxFileSize: $uploadElem.data('size-limit')
        },
        files: $uploadElem.data('init-files'),
        localization: {
          select: $uploadElem.data('label')
        },
        remove: this.onRemove,
        success: this.onSuccess,
        error: this.onError
      });

      if ($uploadElem.data('init-uuid') !== undefined) {
        var upload = $uploadElem.data("kendoUpload");
        var files = upload.getFiles();
        files[0].uid = $uploadElem.data('init-uuid');
      }
    }
  });
})(window, jQuery);
